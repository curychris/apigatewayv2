AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for LKS Kota Malang infrastructure'

Resources:
  # 1. VPC and Networking Components
  LksKotaMalangVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.2.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: lks-kota-malang

  # Request an IPv6 CIDR block
  IPv6CIDRBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      AmazonProvidedIpv6CidrBlock: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: lks-kota-malang-igw

  # Attach the Internet Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      CidrBlock: 20.2.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: lks-kota-malang-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      CidrBlock: 20.2.1.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: lks-kota-malang-public-2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      CidrBlock: 20.2.2.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: lks-kota-malang-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      CidrBlock: 20.2.3.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: lks-kota-malang-private-2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      Tags:
        - Key: Name
          Value: lks-kota-malang-public-rt

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LksKotaMalangVPC
      Tags:
        - Key: Name
          Value: lks-kota-malang-private-rt

  # Route for Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnets with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Subnets with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # 2. Security Groups
  # a. Security Group for Load Balancer
  SGLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS for web access
      VpcId: !Ref LksKotaMalangVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG-LB

  # b. Security Group for Applications and RDS
  SGApps:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application instances and RDS
      VpcId: !Ref LksKotaMalangVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 20.2.0.0/16  # Allow EFS access from entire VPC
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 20.2.2.0/24  # Allow RDS access from private subnet 1
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 20.2.3.0/24  # Allow RDS access from private subnet 2
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0    # Allow public access on port 5000
      Tags:
        - Key: Name
          Value: SG-Apps

  # 3. NAT Instance
  NATInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NAT Instance
      VpcId: !Ref LksKotaMalangVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 20.2.0.0/16
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 20.2.0.0/16
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG-NAT-Instance

  NATInstance:
    Type: AWS::EC2::Instance
    DependsOn: VPCGatewayAttachment   # Make sure the IGW is attached before launching
    Properties:
      ImageId: ami-0015c0130d6cc5da7   # The NAT Instance AMI
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref NATInstanceSecurityGroup
      SubnetId: !Ref PublicSubnet1     # Place in public subnet
      SourceDestCheck: false           # Required for NAT functionality
      Tags:
        - Key: Name
          Value: NAT-Instance

  # Private Route through NAT Instance
  PrivateRouteViaNAT:
    Type: AWS::EC2::Route
    DependsOn: NATInstance
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  # 4. S3 Buckets
  # a. Public Bucket with Lifecycle Rules
  BucketLksKotamalang:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: lks-kotamalang-fahri-25
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveAndDeleteRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: GLACIER
            ExpirationInDays: 365

  BucketLksKotamalangPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketLksKotamalang
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadAccess
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref BucketLksKotamalang, '/*']]

  # b. Docker Image Bucket with Versioning
  BucketDockerImage:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: lks-dockerimage-fahri
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  BucketDockerImagePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketDockerImage
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadAccess
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref BucketDockerImage, '/*']]

  # 5. RDS Instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: LKS-RDS-Apps-SubnetGroup

  MariaDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: LKS-RDS-Apps
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: mariadb
      MasterUsername: admin
      MasterUserPassword: Technobrain2025!
      DBName: techno-rds
      VPCSecurityGroups:
        - !Ref SGApps     # Using the existing SGApps security group
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: LKS-RDS-Apps

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref LksKotaMalangVPC

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2

  NATInstanceId:
    Description: NAT Instance ID
    Value: !Ref NATInstance

  NATInstanceIP:
    Description: NAT Instance Public IP
    Value: !GetAtt NATInstance.PublicIp

  SGLBID:
    Description: Load Balancer Security Group ID
    Value: !Ref SGLB

  SGAppsID:
    Description: Applications Security Group ID
    Value: !Ref SGApps

  BucketPublicName:
    Description: Public S3 Bucket Name
    Value: !Ref BucketLksKotamalang

  BucketDockerImageName:
    Description: Docker Image S3 Bucket Name
    Value: !Ref BucketDockerImage

  RDSEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt MariaDBInstance.Endpoint.Address
